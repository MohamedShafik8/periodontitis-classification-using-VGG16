# -*- coding: utf-8 -*-
"""VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HIle1xsMXfr9GatRw3oEdzRbbW6gKeEc
"""

from tensorflow import keras
from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

IMAGE_SIZE = [224, 224]

train_path = '/content/drive/MyDrive/Train'
valid_path = '/content/drive/MyDrive/Test'

vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)
for layer in vgg.layers:
    layer.trainable = False
folders = glob('/content/drive/MyDrive/Train/*')
x = Flatten()(vgg.output)
prediction = Dense(len(folders), activation='softmax')(x)
model = Model(inputs=vgg.input, outputs=prediction)
model.summary()

from tensorflow.keras.utils import plot_model
plot_model(model,show_shapes=True,to_file='model.png')

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Train',
                                                 target_size = (224, 224),
                                                 batch_size = 10,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Test',
                                            target_size = (224, 224),
                                            batch_size = 10,
                                            class_mode = 'categorical')

r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=7,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

plt.plot(r.history['accuracy'])
plt.title('Model Training Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Training Accuracy')
plt.legend(['Training'], loc='lower right')

plt.plot(r.history['val_accuracy']) 
plt.title('Model Test Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Test Accuracy')
plt.legend(['Testing'], loc = 'lower right')

plt.figure(figsize=(15, 10))
plt.plot(r.history['accuracy'])
plt.plot(r.history['val_accuracy'])
plt.legend(['Training accuracy','Validation accuracy'], fontsize=16)
plt.title("Accuracy Vs Epochs", fontsize=18)
plt.xlabel("Num. of Epochs", fontsize=16)
plt.ylabel("Accuracy", fontsize=16)
print("Accuracy Vs Epochs")
print("Training accuracy : 0.8250","\nValue accuracy : 0.7500")
plt.show()



from keras.preprocessing import image
import tensorflow as tf
from keras.applications.vgg16 import preprocess_input
img=tf.keras.utils.load_img('/content/WhatsApp Image 2023-02-25 at 1.13.05 AM.jpeg',target_size=(224,224))
plt.imshow(img)
plt.title("Prediction: Periodontal ", fontsize=14)

x=keras.utils.img_to_array (img)
x=np.expand_dims(x, axis=0)
img_data=preprocess_input(x)
classes=model.predict(img_data)
result=int(classes[0][0])
if result==0:
    print("Periodontal")
else:
    print("non-periodontal")

model.save("periovgg16.h5")



